// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum UserRole {
  admin
  manager
  staff
}

enum SubscriptionPlan {
  free
  pro
  enterprise
}

enum EquipmentStatus {
  good_to_go
  needs_maintenance
  out_of_order
}

enum EquipmentCondition {
  excellent
  good
  fair
  poor
}

enum EventStatus {
  draft
  confirmed
  in_progress
  completed
  cancelled
}

enum MaintenanceStatus {
  pending
  in_progress
  completed
  cancelled
}

enum MaintenancePriority {
  low
  medium
  high
  critical
}

enum AssignmentType {
  event
  team
  storage
}

// MODELS
model Company {
  id                   String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String           @db.VarChar(255)
  subdomain            String?          @unique @db.VarChar(50)
  email                String           @db.VarChar(255)
  phone                String?          @db.VarChar(20)
  address              String?          @db.Text
  logoUrl              String?          @map("logo_url") @db.VarChar(500)
  subscriptionPlan     SubscriptionPlan @default(free) @map("subscription_plan")
  maxEquipmentCount    Int              @default(20) @map("max_equipment_count")
  isActive             Boolean          @default(true) @map("is_active")
  createdAt            DateTime         @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime         @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  users                User[]
  equipmentTypes       EquipmentType[]
  equipment            Equipment[]
  teams                Team[]
  events               Event[]
  auditLogs           AuditLog[]
  notifications       Notification[]
  subscriptionUsage   SubscriptionUsage[]
  componentCategories ComponentCategory[]
  fileUploads         FileUpload[]
  userInvitations     UserInvitation[]
  companySettings     CompanySettings?

  @@index([subscriptionPlan])
  @@index([isActive])
  @@map("companies")
}

model User {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId         String    @map("company_id") @db.Uuid
  email             String    @db.VarChar(255)
  passwordHash      String    @map("password_hash") @db.VarChar(255)
  firstName         String    @map("first_name") @db.VarChar(100)
  lastName          String    @map("last_name") @db.VarChar(100)
  phone             String?   @db.VarChar(20)
  profilePhotoUrl   String?   @map("profile_photo_url") @db.VarChar(500)
  role              UserRole  @default(staff)
  isActive          Boolean   @default(true) @map("is_active")
  lastLoginAt       DateTime? @map("last_login_at") @db.Timestamp(6)
  emailVerifiedAt   DateTime? @map("email_verified_at") @db.Timestamp(6)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  company              Company                @relation(fields: [companyId], references: [id])
  createdEquipment     Equipment[]            @relation("EquipmentCreatedBy")
  ledTeams             Team[]                 @relation("TeamLead")
  teamMemberships      TeamMember[]
  createdEvents        Event[]                @relation("EventCreatedBy")
  eventTeamAssignments EventTeamAssignment[]
  equipmentAssignments EquipmentAssignment[]
  reportedMaintenance  MaintenanceLog[]       @relation("MaintenanceReportedBy")
  assignedMaintenance  MaintenanceLog[]       @relation("MaintenanceAssignedTo")
  auditLogs           AuditLog[]
  notifications       Notification[]
  statusHistoryChanges EquipmentStatusHistory[]
  fileUploads         FileUpload[]
  sentInvitations     UserInvitation[]
  passwordResetTokens PasswordResetToken[]
  apiTokens           ApiToken[]

  @@unique([companyId, email])
  @@index([companyId])
  @@index([role])
  @@index([isActive])
  @@map("users")
}

model PasswordResetToken {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  token     String    @unique @db.VarChar(255)
  expiresAt DateTime  @map("expires_at") @db.Timestamp(6)
  usedAt    DateTime? @map("used_at") @db.Timestamp(6)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id])

  @@map("password_reset_tokens")
}

model ApiToken {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  name        String    @db.VarChar(100)
  tokenHash   String    @map("token_hash") @db.VarChar(255)
  expiresAt   DateTime? @map("expires_at") @db.Timestamp(6)
  lastUsedAt  DateTime? @map("last_used_at") @db.Timestamp(6)
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id])

  @@map("api_tokens")
}

model UserInvitation {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId  String    @map("company_id") @db.Uuid
  email      String    @db.VarChar(255)
  role       UserRole
  invitedBy  String    @map("invited_by") @db.Uuid
  token      String    @unique @db.VarChar(255)
  expiresAt  DateTime  @map("expires_at") @db.Timestamp(6)
  acceptedAt DateTime? @map("accepted_at") @db.Timestamp(6)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamp(6)

  company   Company @relation(fields: [companyId], references: [id])
  inviter   User    @relation(fields: [invitedBy], references: [id])

  @@map("user_invitations")
}

model ComponentCategory {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId   String    @map("company_id") @db.Uuid
  name        String    @db.VarChar(100)
  description String?   @db.Text
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  company   Company     @relation(fields: [companyId], references: [id])
  equipment Equipment[]

  @@unique([companyId, name])
  @@map("component_categories")
}

model EquipmentType {
  id                            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId                     String    @map("company_id") @db.Uuid
  name                          String    @db.VarChar(100)
  description                   String?   @db.Text
  defaultMaintenanceIntervalDays Int?     @default(180) @map("default_maintenance_interval_days")
  isActive                      Boolean   @default(true) @map("is_active")
  createdAt                     DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt                     DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  company   Company     @relation(fields: [companyId], references: [id])
  equipment Equipment[]

  @@unique([companyId, name])
  @@index([companyId])
  @@map("equipment_types")
}

model Equipment {
  id                     String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId              String              @map("company_id") @db.Uuid
  equipmentTypeId        String?             @map("equipment_type_id") @db.Uuid
  parentEquipmentId      String?             @map("parent_equipment_id") @db.Uuid
  componentCategoryId    String?             @map("component_category_id") @db.Uuid
  name                   String              @db.VarChar(255)
  serialNumber           String?             @map("serial_number") @db.VarChar(100)
  model                  String?             @db.VarChar(100)
  purchaseDate           DateTime?           @map("purchase_date") @db.Date
  purchasePrice          Decimal?            @map("purchase_price") @db.Decimal(10, 2)
  currentStatus          EquipmentStatus     @default(good_to_go) @map("current_status")
  condition              EquipmentCondition  @default(excellent)
  location               String              @default("Warehouse") @db.VarChar(255)
  notes                  String?             @db.Text
  lastMaintenanceDate    DateTime?           @map("last_maintenance_date") @db.Date
  nextMaintenanceDue     DateTime?           @map("next_maintenance_due") @db.Date
  qrCode                 String?             @unique @map("qr_code") @db.VarChar(100)
  photoUrls              String[]            @map("photo_urls")
  isParent               Boolean             @default(false) @map("is_parent")
  isComponent            Boolean             @default(false) @map("is_component")
  isActive               Boolean             @default(true) @map("is_active")
  createdBy              String?             @map("created_by") @db.Uuid
  createdAt              DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt              DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  company            Company                  @relation(fields: [companyId], references: [id])
  equipmentType      EquipmentType?           @relation(fields: [equipmentTypeId], references: [id])
  parentEquipment    Equipment?               @relation("EquipmentHierarchy", fields: [parentEquipmentId], references: [id])
  componentCategory  ComponentCategory?       @relation(fields: [componentCategoryId], references: [id])
  creator            User?                    @relation("EquipmentCreatedBy", fields: [createdBy], references: [id])
  childEquipment     Equipment[]              @relation("EquipmentHierarchy")
  assignments        EquipmentAssignment[]
  maintenanceLogs    MaintenanceLog[]
  statusHistory      EquipmentStatusHistory[]

  @@unique([companyId, serialNumber])
  @@index([companyId])
  @@index([equipmentTypeId])
  @@index([currentStatus])
  @@index([condition])
  @@index([nextMaintenanceDue])
  @@index([parentEquipmentId])
  @@map("equipment")
}

model Team {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId   String    @map("company_id") @db.Uuid
  name        String    @db.VarChar(100)
  description String?   @db.Text
  teamLeadId  String?   @map("team_lead_id") @db.Uuid
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  company              Company                @relation(fields: [companyId], references: [id])
  teamLead             User?                  @relation("TeamLead", fields: [teamLeadId], references: [id])
  members              TeamMember[]
  eventAssignments     EventTeamAssignment[]
  equipmentAssignments EquipmentAssignment[]

  @@unique([companyId, name])
  @@index([companyId])
  @@index([teamLeadId])
  @@map("teams")
}

model TeamMember {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamId   String   @map("team_id") @db.Uuid
  userId   String   @map("user_id") @db.Uuid
  joinedAt DateTime @default(now()) @map("joined_at") @db.Timestamp(6)

  team Team @relation(fields: [teamId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@index([teamId])
  @@index([userId])
  @@map("team_members")
}

model Event {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId         String              @map("company_id") @db.Uuid
  name              String              @db.VarChar(255)
  clientName        String?             @map("client_name") @db.VarChar(255)
  clientEmail       String?             @map("client_email") @db.VarChar(255)
  clientPhone       String?             @map("client_phone") @db.VarChar(20)
  eventLocation     String?             @map("event_location") @db.VarChar(500)
  eventAddress      String?             @map("event_address") @db.Text
  startDatetime     DateTime            @map("start_datetime") @db.Timestamp(6)
  endDatetime       DateTime            @map("end_datetime") @db.Timestamp(6)
  setupDatetime     DateTime?           @map("setup_datetime") @db.Timestamp(6)
  breakdownDatetime DateTime?           @map("breakdown_datetime") @db.Timestamp(6)
  status            EventStatus         @default(draft)
  notes             String?             @db.Text
  totalValue        Decimal?            @map("total_value") @db.Decimal(10, 2)
  createdBy         String              @map("created_by") @db.Uuid
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  company              Company                @relation(fields: [companyId], references: [id])
  creator              User                   @relation("EventCreatedBy", fields: [createdBy], references: [id])
  teamAssignments      EventTeamAssignment[]
  equipmentAssignments EquipmentAssignment[]

  @@index([companyId])
  @@index([status])
  @@index([startDatetime])
  @@index([endDatetime])
  @@index([createdBy])
  @@map("events")
}

model EventTeamAssignment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  eventId    String   @map("event_id") @db.Uuid
  teamId     String   @map("team_id") @db.Uuid
  assignedBy String   @map("assigned_by") @db.Uuid
  assignedAt DateTime @default(now()) @map("assigned_at") @db.Timestamp(6)

  event    Event @relation(fields: [eventId], references: [id])
  team     Team  @relation(fields: [teamId], references: [id])
  assigner User  @relation(fields: [assignedBy], references: [id])

  @@unique([eventId, teamId])
  @@index([eventId])
  @@index([teamId])
  @@map("event_team_assignments")
}

model EquipmentAssignment {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  equipmentId    String         @map("equipment_id") @db.Uuid
  assignmentType AssignmentType @map("assignment_type")
  eventId        String?        @map("event_id") @db.Uuid
  teamId         String?        @map("team_id") @db.Uuid
  assignedBy     String         @map("assigned_by") @db.Uuid
  assignedAt     DateTime       @default(now()) @map("assigned_at") @db.Timestamp(6)
  returnedAt     DateTime?      @map("returned_at") @db.Timestamp(6)
  notes          String?        @db.Text

  equipment Equipment @relation(fields: [equipmentId], references: [id])
  event     Event?    @relation(fields: [eventId], references: [id])
  team      Team?     @relation(fields: [teamId], references: [id])
  assigner  User      @relation(fields: [assignedBy], references: [id])

  @@index([equipmentId])
  @@index([assignmentType])
  @@index([eventId])
  @@index([teamId])
  @@index([assignedBy])
  @@index([equipmentId, returnedAt])
  @@map("equipment_assignments")
}

model MaintenanceLog {
  id                     String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  equipmentId            String              @map("equipment_id") @db.Uuid
  title                  String              @db.VarChar(255)
  description            String              @db.Text
  status                 MaintenanceStatus   @default(pending)
  priority               MaintenancePriority @default(medium)
  issuePhotoUrls         String[]            @map("issue_photo_urls")
  reportedBy             String              @map("reported_by") @db.Uuid
  assignedTo             String?             @map("assigned_to") @db.Uuid
  reportedAt             DateTime            @default(now()) @map("reported_at") @db.Timestamp(6)
  startedAt              DateTime?           @map("started_at") @db.Timestamp(6)
  completedAt            DateTime?           @map("completed_at") @db.Timestamp(6)
  estimatedCost          Decimal?            @map("estimated_cost") @db.Decimal(10, 2)
  actualCost             Decimal?            @map("actual_cost") @db.Decimal(10, 2)
  partsUsed              String?             @map("parts_used") @db.Text
  workPerformed          String?             @map("work_performed") @db.Text
  completionPhotoUrls    String[]            @map("completion_photo_urls")

  equipment Equipment @relation(fields: [equipmentId], references: [id])
  reporter  User      @relation("MaintenanceReportedBy", fields: [reportedBy], references: [id])
  assignee  User?     @relation("MaintenanceAssignedTo", fields: [assignedTo], references: [id])

  @@index([equipmentId])
  @@index([status])
  @@index([priority])
  @@index([reportedBy])
  @@index([assignedTo])
  @@index([reportedAt])
  @@index([completedAt])
  @@map("maintenance_logs")
}

model AuditLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId  String   @map("company_id") @db.Uuid
  userId     String?  @map("user_id") @db.Uuid
  action     String   @db.VarChar(100)
  entityType String   @map("entity_type") @db.VarChar(50)
  entityId   String?  @map("entity_id") @db.Uuid
  oldValues  Json?    @map("old_values")
  newValues  Json?    @map("new_values")
  ipAddress  String?  @map("ip_address") @db.Inet
  userAgent  String?  @map("user_agent") @db.Text
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  company Company @relation(fields: [companyId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])

  @@index([companyId])
  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

model Notification {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId  String    @map("company_id") @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  title      String    @db.VarChar(255)
  message    String    @db.Text
  type       String    @db.VarChar(50)
  entityType String?   @map("entity_type") @db.VarChar(50)
  entityId   String?   @map("entity_id") @db.Uuid
  isRead     Boolean   @default(false) @map("is_read")
  sentAt     DateTime  @default(now()) @map("sent_at") @db.Timestamp(6)
  readAt     DateTime? @map("read_at") @db.Timestamp(6)

  company Company @relation(fields: [companyId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([companyId, userId])
  @@index([userId])
  @@index([isRead])
  @@index([sentAt])
  @@index([type])
  @@map("notifications")
}

model EquipmentStatusHistory {
  id          String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  equipmentId String             @map("equipment_id") @db.Uuid
  oldStatus   EquipmentStatus?   @map("old_status")
  newStatus   EquipmentStatus    @map("new_status")
  oldLocation String?            @map("old_location") @db.VarChar(255)
  newLocation String?            @map("new_location") @db.VarChar(255)
  changedBy   String             @map("changed_by") @db.Uuid
  notes       String?            @db.Text
  photoUrls   String[]           @map("photo_urls")
  changedAt   DateTime           @default(now()) @map("changed_at") @db.Timestamp(6)

  equipment Equipment @relation(fields: [equipmentId], references: [id])
  changer   User      @relation(fields: [changedBy], references: [id])

  @@index([equipmentId])
  @@index([changedBy])
  @@index([changedAt])
  @@index([newStatus])
  @@map("equipment_status_history")
}

model FileUpload {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId    String   @map("company_id") @db.Uuid
  uploadedBy   String   @map("uploaded_by") @db.Uuid
  filename     String   @db.VarChar(255)
  fileSizeBytes BigInt  @map("file_size_bytes")
  mimeType     String   @map("mime_type") @db.VarChar(100)
  storagePath  String   @map("storage_path") @db.VarChar(500)
  entityType   String?  @map("entity_type") @db.VarChar(50)
  entityId     String?  @map("entity_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  company  Company @relation(fields: [companyId], references: [id])
  uploader User    @relation(fields: [uploadedBy], references: [id])

  @@index([companyId])
  @@index([uploadedBy])
  @@index([entityType, entityId])
  @@map("file_uploads")
}

model CompanySettings {
  id                       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId                String  @unique @map("company_id") @db.Uuid
  maintenanceReminderDays  Int     @default(30) @map("maintenance_reminder_days")
  defaultEquipmentLocation String  @default("Warehouse") @map("default_equipment_location") @db.VarChar(255)
  timezone                 String  @default("UTC") @db.VarChar(50)
  settingsJson             Json?   @map("settings_json")

  company Company @relation(fields: [companyId], references: [id])

  @@map("company_settings")
}

model SubscriptionUsage {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId     String   @map("company_id") @db.Uuid
  month         DateTime @db.Date
  equipmentCount Int     @default(0) @map("equipment_count")
  eventsCount   Int      @default(0) @map("events_count")
  usersCount    Int      @default(0) @map("users_count")
  storageUsedMb Int      @default(0) @map("storage_used_mb")
  apiCalls      Int      @default(0) @map("api_calls")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  company Company @relation(fields: [companyId], references: [id])

  @@unique([companyId, month])
  @@index([companyId])
  @@index([month])
  @@map("subscription_usage")
}
